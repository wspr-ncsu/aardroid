// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.argus.jnsaf.server.jnsaf_grpc

@SerialVersionUID(0L)
final case class TaintAnalysisRequest(
    apkDigest: _root_.scala.Predef.String = "",
    algo: org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest.Algorithm = org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest.Algorithm.COMPONENT_BASED
    ) extends scalapb.GeneratedMessage with scalapb.Message[TaintAnalysisRequest] with scalapb.lenses.Updatable[TaintAnalysisRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (apkDigest != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, apkDigest) }
      if (algo != org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest.Algorithm.COMPONENT_BASED) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, algo.value) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = apkDigest
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = algo
        if (__v != org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest.Algorithm.COMPONENT_BASED) {
          _output__.writeEnum(2, __v.value)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest = {
      var __apkDigest = this.apkDigest
      var __algo = this.algo
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __apkDigest = _input__.readString()
          case 16 =>
            __algo = org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest.Algorithm.fromValue(_input__.readEnum())
          case tag => _input__.skipField(tag)
        }
      }
      org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest(
          apkDigest = __apkDigest,
          algo = __algo
      )
    }
    def withApkDigest(__v: _root_.scala.Predef.String): TaintAnalysisRequest = copy(apkDigest = __v)
    def withAlgo(__v: org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest.Algorithm): TaintAnalysisRequest = copy(algo = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = apkDigest
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = algo.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(apkDigest)
        case 2 => _root_.scalapb.descriptors.PEnum(algo.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest
}

object TaintAnalysisRequest extends scalapb.GeneratedMessageCompanion[org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest.Algorithm.fromValue(__fieldsMap.getOrElse(__fields.get(1), org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest.Algorithm.COMPONENT_BASED.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest.Algorithm.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest.Algorithm.COMPONENT_BASED.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = JnsafGrpcProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = JnsafGrpcProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest.Algorithm
    }
  }
  lazy val defaultInstance = org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest(
  )
  sealed trait Algorithm extends _root_.scalapb.GeneratedEnum {
    type EnumType = Algorithm
    def isComponentBased: _root_.scala.Boolean = false
    def isBottomUp: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Algorithm] = org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest.Algorithm
  }
  
  object Algorithm extends _root_.scalapb.GeneratedEnumCompanion[Algorithm] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Algorithm] = this
    @SerialVersionUID(0L)
    case object COMPONENT_BASED extends Algorithm {
      val value = 0
      val index = 0
      val name = "COMPONENT_BASED"
      override def isComponentBased: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object BOTTOM_UP extends Algorithm {
      val value = 1
      val index = 1
      val name = "BOTTOM_UP"
      override def isBottomUp: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Algorithm with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(COMPONENT_BASED, BOTTOM_UP)
    def fromValue(value: _root_.scala.Int): Algorithm = value match {
      case 0 => COMPONENT_BASED
      case 1 => BOTTOM_UP
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest.scalaDescriptor.enums(0)
  }
  implicit class TaintAnalysisRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest](_l) {
    def apkDigest: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.apkDigest)((c_, f_) => c_.copy(apkDigest = f_))
    def algo: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jnsaf.server.jnsaf_grpc.TaintAnalysisRequest.Algorithm] = field(_.algo)((c_, f_) => c_.copy(algo = f_))
  }
  final val APK_DIGEST_FIELD_NUMBER = 1
  final val ALGO_FIELD_NUMBER = 2
}
