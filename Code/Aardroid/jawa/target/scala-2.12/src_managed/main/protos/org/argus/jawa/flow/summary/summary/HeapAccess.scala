// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.argus.jawa.flow.summary.summary

@SerialVersionUID(0L)
final case class HeapAccess(
    heapAccess: org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess = org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[HeapAccess] with scalapb.lenses.Updatable[HeapAccess] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (heapAccess.fieldAccess.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(heapAccess.fieldAccess.get.serializedSize) + heapAccess.fieldAccess.get.serializedSize }
      if (heapAccess.arrayAccess.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(heapAccess.arrayAccess.get.serializedSize) + heapAccess.arrayAccess.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      heapAccess.fieldAccess.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      heapAccess.arrayAccess.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.argus.jawa.flow.summary.summary.HeapAccess = {
      var __heapAccess = this.heapAccess
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __heapAccess = org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess.FieldAccess(_root_.scalapb.LiteParser.readMessage(_input__, heapAccess.fieldAccess.getOrElse(org.argus.jawa.flow.summary.summary.SuFieldAccess.defaultInstance)))
          case 18 =>
            __heapAccess = org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess.ArrayAccess(_root_.scalapb.LiteParser.readMessage(_input__, heapAccess.arrayAccess.getOrElse(org.argus.jawa.flow.summary.summary.SuArrayAccess.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      org.argus.jawa.flow.summary.summary.HeapAccess(
          heapAccess = __heapAccess
      )
    }
    def getFieldAccess: org.argus.jawa.flow.summary.summary.SuFieldAccess = heapAccess.fieldAccess.getOrElse(org.argus.jawa.flow.summary.summary.SuFieldAccess.defaultInstance)
    def withFieldAccess(__v: org.argus.jawa.flow.summary.summary.SuFieldAccess): HeapAccess = copy(heapAccess = org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess.FieldAccess(__v))
    def getArrayAccess: org.argus.jawa.flow.summary.summary.SuArrayAccess = heapAccess.arrayAccess.getOrElse(org.argus.jawa.flow.summary.summary.SuArrayAccess.defaultInstance)
    def withArrayAccess(__v: org.argus.jawa.flow.summary.summary.SuArrayAccess): HeapAccess = copy(heapAccess = org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess.ArrayAccess(__v))
    def clearHeapAccess: HeapAccess = copy(heapAccess = org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess.Empty)
    def withHeapAccess(__v: org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess): HeapAccess = copy(heapAccess = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => heapAccess.fieldAccess.orNull
        case 2 => heapAccess.arrayAccess.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => heapAccess.fieldAccess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => heapAccess.arrayAccess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.argus.jawa.flow.summary.summary.HeapAccess
}

object HeapAccess extends scalapb.GeneratedMessageCompanion[org.argus.jawa.flow.summary.summary.HeapAccess] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.argus.jawa.flow.summary.summary.HeapAccess] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.argus.jawa.flow.summary.summary.HeapAccess = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.argus.jawa.flow.summary.summary.HeapAccess(
      heapAccess = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.argus.jawa.flow.summary.summary.SuFieldAccess]].map(org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess.FieldAccess)
    .orElse[org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.argus.jawa.flow.summary.summary.SuArrayAccess]].map(org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess.ArrayAccess))
    .getOrElse(org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.argus.jawa.flow.summary.summary.HeapAccess] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.argus.jawa.flow.summary.summary.HeapAccess(
        heapAccess = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[org.argus.jawa.flow.summary.summary.SuFieldAccess]]).map(org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess.FieldAccess)
    .orElse[org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.argus.jawa.flow.summary.summary.SuArrayAccess]]).map(org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess.ArrayAccess))
    .getOrElse(org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SummaryProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SummaryProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = org.argus.jawa.flow.summary.summary.SuFieldAccess
      case 2 => __out = org.argus.jawa.flow.summary.summary.SuArrayAccess
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.argus.jawa.flow.summary.summary.HeapAccess(
  )
  sealed trait HeapAccess extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isFieldAccess: _root_.scala.Boolean = false
    def isArrayAccess: _root_.scala.Boolean = false
    def fieldAccess: scala.Option[org.argus.jawa.flow.summary.summary.SuFieldAccess] = None
    def arrayAccess: scala.Option[org.argus.jawa.flow.summary.summary.SuArrayAccess] = None
  }
  object HeapAccess extends {
    @SerialVersionUID(0L)
    case object Empty extends org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class FieldAccess(value: org.argus.jawa.flow.summary.summary.SuFieldAccess) extends org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess {
      type ValueType = org.argus.jawa.flow.summary.summary.SuFieldAccess
      override def isFieldAccess: _root_.scala.Boolean = true
      override def fieldAccess: scala.Option[org.argus.jawa.flow.summary.summary.SuFieldAccess] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class ArrayAccess(value: org.argus.jawa.flow.summary.summary.SuArrayAccess) extends org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess {
      type ValueType = org.argus.jawa.flow.summary.summary.SuArrayAccess
      override def isArrayAccess: _root_.scala.Boolean = true
      override def arrayAccess: scala.Option[org.argus.jawa.flow.summary.summary.SuArrayAccess] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class HeapAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.flow.summary.summary.HeapAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.argus.jawa.flow.summary.summary.HeapAccess](_l) {
    def fieldAccess: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.flow.summary.summary.SuFieldAccess] = field(_.getFieldAccess)((c_, f_) => c_.copy(heapAccess = org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess.FieldAccess(f_)))
    def arrayAccess: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.flow.summary.summary.SuArrayAccess] = field(_.getArrayAccess)((c_, f_) => c_.copy(heapAccess = org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess.ArrayAccess(f_)))
    def heapAccess: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.flow.summary.summary.HeapAccess.HeapAccess] = field(_.heapAccess)((c_, f_) => c_.copy(heapAccess = f_))
  }
  final val FIELD_ACCESS_FIELD_NUMBER = 1
  final val ARRAY_ACCESS_FIELD_NUMBER = 2
}
