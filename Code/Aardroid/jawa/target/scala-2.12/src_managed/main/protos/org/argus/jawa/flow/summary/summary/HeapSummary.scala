// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.argus.jawa.flow.summary.summary

@SerialVersionUID(0L)
final case class HeapSummary(
    methodSignature: scala.Option[org.argus.jawa.core.java_signatures.MethodSignature] = None,
    rules: _root_.scala.collection.Seq[org.argus.jawa.flow.summary.summary.HeapSummaryRule] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[HeapSummary] with scalapb.lenses.Updatable[HeapSummary] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (methodSignature.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(methodSignature.get.serializedSize) + methodSignature.get.serializedSize }
      rules.foreach(rules => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(rules.serializedSize) + rules.serializedSize)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      methodSignature.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      rules.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.argus.jawa.flow.summary.summary.HeapSummary = {
      var __methodSignature = this.methodSignature
      val __rules = (_root_.scala.collection.immutable.Vector.newBuilder[org.argus.jawa.flow.summary.summary.HeapSummaryRule] ++= this.rules)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __methodSignature = Option(_root_.scalapb.LiteParser.readMessage(_input__, __methodSignature.getOrElse(org.argus.jawa.core.java_signatures.MethodSignature.defaultInstance)))
          case 18 =>
            __rules += _root_.scalapb.LiteParser.readMessage(_input__, org.argus.jawa.flow.summary.summary.HeapSummaryRule.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      org.argus.jawa.flow.summary.summary.HeapSummary(
          methodSignature = __methodSignature,
          rules = __rules.result()
      )
    }
    def getMethodSignature: org.argus.jawa.core.java_signatures.MethodSignature = methodSignature.getOrElse(org.argus.jawa.core.java_signatures.MethodSignature.defaultInstance)
    def clearMethodSignature: HeapSummary = copy(methodSignature = None)
    def withMethodSignature(__v: org.argus.jawa.core.java_signatures.MethodSignature): HeapSummary = copy(methodSignature = Option(__v))
    def clearRules = copy(rules = _root_.scala.collection.Seq.empty)
    def addRules(__vs: org.argus.jawa.flow.summary.summary.HeapSummaryRule*): HeapSummary = addAllRules(__vs)
    def addAllRules(__vs: TraversableOnce[org.argus.jawa.flow.summary.summary.HeapSummaryRule]): HeapSummary = copy(rules = rules ++ __vs)
    def withRules(__v: _root_.scala.collection.Seq[org.argus.jawa.flow.summary.summary.HeapSummaryRule]): HeapSummary = copy(rules = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => methodSignature.orNull
        case 2 => rules
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => methodSignature.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(rules.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.argus.jawa.flow.summary.summary.HeapSummary
}

object HeapSummary extends scalapb.GeneratedMessageCompanion[org.argus.jawa.flow.summary.summary.HeapSummary] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.argus.jawa.flow.summary.summary.HeapSummary] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.argus.jawa.flow.summary.summary.HeapSummary = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.argus.jawa.flow.summary.summary.HeapSummary(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.argus.jawa.core.java_signatures.MethodSignature]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[org.argus.jawa.flow.summary.summary.HeapSummaryRule]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.argus.jawa.flow.summary.summary.HeapSummary] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.argus.jawa.flow.summary.summary.HeapSummary(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[org.argus.jawa.core.java_signatures.MethodSignature]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[org.argus.jawa.flow.summary.summary.HeapSummaryRule]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SummaryProto.javaDescriptor.getMessageTypes.get(22)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SummaryProto.scalaDescriptor.messages(22)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = org.argus.jawa.core.java_signatures.MethodSignature
      case 2 => __out = org.argus.jawa.flow.summary.summary.HeapSummaryRule
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.argus.jawa.flow.summary.summary.HeapSummary(
  )
  implicit class HeapSummaryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.flow.summary.summary.HeapSummary]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.argus.jawa.flow.summary.summary.HeapSummary](_l) {
    def methodSignature: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.core.java_signatures.MethodSignature] = field(_.getMethodSignature)((c_, f_) => c_.copy(methodSignature = Option(f_)))
    def optionalMethodSignature: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.argus.jawa.core.java_signatures.MethodSignature]] = field(_.methodSignature)((c_, f_) => c_.copy(methodSignature = f_))
    def rules: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.argus.jawa.flow.summary.summary.HeapSummaryRule]] = field(_.rules)((c_, f_) => c_.copy(rules = f_))
  }
  final val METHOD_SIGNATURE_FIELD_NUMBER = 1
  final val RULES_FIELD_NUMBER = 2
}
