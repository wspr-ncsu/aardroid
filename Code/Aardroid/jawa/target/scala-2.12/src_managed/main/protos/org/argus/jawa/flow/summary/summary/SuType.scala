// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.argus.jawa.flow.summary.summary

@SerialVersionUID(0L)
final case class SuType(
    suType: org.argus.jawa.flow.summary.summary.SuType.SuType = org.argus.jawa.flow.summary.summary.SuType.SuType.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[SuType] with scalapb.lenses.Updatable[SuType] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (suType.suJavaType.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(suType.suJavaType.get.serializedSize) + suType.suJavaType.get.serializedSize }
      if (suType.suString.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(suType.suString.get.serializedSize) + suType.suString.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      suType.suJavaType.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      suType.suString.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.argus.jawa.flow.summary.summary.SuType = {
      var __suType = this.suType
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __suType = org.argus.jawa.flow.summary.summary.SuType.SuType.SuJavaType(_root_.scalapb.LiteParser.readMessage(_input__, suType.suJavaType.getOrElse(org.argus.jawa.flow.summary.summary.SuJavaType.defaultInstance)))
          case 18 =>
            __suType = org.argus.jawa.flow.summary.summary.SuType.SuType.SuString(_root_.scalapb.LiteParser.readMessage(_input__, suType.suString.getOrElse(org.argus.jawa.flow.summary.summary.SuString.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      org.argus.jawa.flow.summary.summary.SuType(
          suType = __suType
      )
    }
    def getSuJavaType: org.argus.jawa.flow.summary.summary.SuJavaType = suType.suJavaType.getOrElse(org.argus.jawa.flow.summary.summary.SuJavaType.defaultInstance)
    def withSuJavaType(__v: org.argus.jawa.flow.summary.summary.SuJavaType): SuType = copy(suType = org.argus.jawa.flow.summary.summary.SuType.SuType.SuJavaType(__v))
    def getSuString: org.argus.jawa.flow.summary.summary.SuString = suType.suString.getOrElse(org.argus.jawa.flow.summary.summary.SuString.defaultInstance)
    def withSuString(__v: org.argus.jawa.flow.summary.summary.SuString): SuType = copy(suType = org.argus.jawa.flow.summary.summary.SuType.SuType.SuString(__v))
    def clearSuType: SuType = copy(suType = org.argus.jawa.flow.summary.summary.SuType.SuType.Empty)
    def withSuType(__v: org.argus.jawa.flow.summary.summary.SuType.SuType): SuType = copy(suType = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => suType.suJavaType.orNull
        case 2 => suType.suString.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => suType.suJavaType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => suType.suString.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.argus.jawa.flow.summary.summary.SuType
}

object SuType extends scalapb.GeneratedMessageCompanion[org.argus.jawa.flow.summary.summary.SuType] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.argus.jawa.flow.summary.summary.SuType] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.argus.jawa.flow.summary.summary.SuType = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.argus.jawa.flow.summary.summary.SuType(
      suType = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.argus.jawa.flow.summary.summary.SuJavaType]].map(org.argus.jawa.flow.summary.summary.SuType.SuType.SuJavaType)
    .orElse[org.argus.jawa.flow.summary.summary.SuType.SuType](__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.argus.jawa.flow.summary.summary.SuString]].map(org.argus.jawa.flow.summary.summary.SuType.SuType.SuString))
    .getOrElse(org.argus.jawa.flow.summary.summary.SuType.SuType.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.argus.jawa.flow.summary.summary.SuType] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.argus.jawa.flow.summary.summary.SuType(
        suType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[org.argus.jawa.flow.summary.summary.SuJavaType]]).map(org.argus.jawa.flow.summary.summary.SuType.SuType.SuJavaType)
    .orElse[org.argus.jawa.flow.summary.summary.SuType.SuType](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.argus.jawa.flow.summary.summary.SuString]]).map(org.argus.jawa.flow.summary.summary.SuType.SuType.SuString))
    .getOrElse(org.argus.jawa.flow.summary.summary.SuType.SuType.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SummaryProto.javaDescriptor.getMessageTypes.get(11)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SummaryProto.scalaDescriptor.messages(11)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = org.argus.jawa.flow.summary.summary.SuJavaType
      case 2 => __out = org.argus.jawa.flow.summary.summary.SuString
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.argus.jawa.flow.summary.summary.SuType(
  )
  sealed trait SuType extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isSuJavaType: _root_.scala.Boolean = false
    def isSuString: _root_.scala.Boolean = false
    def suJavaType: scala.Option[org.argus.jawa.flow.summary.summary.SuJavaType] = None
    def suString: scala.Option[org.argus.jawa.flow.summary.summary.SuString] = None
  }
  object SuType extends {
    @SerialVersionUID(0L)
    case object Empty extends org.argus.jawa.flow.summary.summary.SuType.SuType {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class SuJavaType(value: org.argus.jawa.flow.summary.summary.SuJavaType) extends org.argus.jawa.flow.summary.summary.SuType.SuType {
      type ValueType = org.argus.jawa.flow.summary.summary.SuJavaType
      override def isSuJavaType: _root_.scala.Boolean = true
      override def suJavaType: scala.Option[org.argus.jawa.flow.summary.summary.SuJavaType] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class SuString(value: org.argus.jawa.flow.summary.summary.SuString) extends org.argus.jawa.flow.summary.summary.SuType.SuType {
      type ValueType = org.argus.jawa.flow.summary.summary.SuString
      override def isSuString: _root_.scala.Boolean = true
      override def suString: scala.Option[org.argus.jawa.flow.summary.summary.SuString] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class SuTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.flow.summary.summary.SuType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.argus.jawa.flow.summary.summary.SuType](_l) {
    def suJavaType: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.flow.summary.summary.SuJavaType] = field(_.getSuJavaType)((c_, f_) => c_.copy(suType = org.argus.jawa.flow.summary.summary.SuType.SuType.SuJavaType(f_)))
    def suString: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.flow.summary.summary.SuString] = field(_.getSuString)((c_, f_) => c_.copy(suType = org.argus.jawa.flow.summary.summary.SuType.SuType.SuString(f_)))
    def suType: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.flow.summary.summary.SuType.SuType] = field(_.suType)((c_, f_) => c_.copy(suType = f_))
  }
  final val SU_JAVA_TYPE_FIELD_NUMBER = 1
  final val SU_STRING_FIELD_NUMBER = 2
}
