// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.argus.jawa.flow.taint_result

@SerialVersionUID(0L)
final case class TaintPath(
    source: scala.Option[org.argus.jawa.flow.taint_result.TaintNode] = None,
    sink: scala.Option[org.argus.jawa.flow.taint_result.TaintNode] = None,
    types: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty,
    steps: _root_.scala.collection.Seq[_root_.scala.Predef.String] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[TaintPath] with scalapb.lenses.Updatable[TaintPath] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (source.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(source.get.serializedSize) + source.get.serializedSize }
      if (sink.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(sink.get.serializedSize) + sink.get.serializedSize }
      types.foreach(types => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, types))
      steps.foreach(steps => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, steps))
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      source.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      sink.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      types.foreach { __v =>
        _output__.writeString(3, __v)
      };
      steps.foreach { __v =>
        _output__.writeString(4, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.argus.jawa.flow.taint_result.TaintPath = {
      var __source = this.source
      var __sink = this.sink
      val __types = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.types)
      val __steps = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.steps)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __source = Option(_root_.scalapb.LiteParser.readMessage(_input__, __source.getOrElse(org.argus.jawa.flow.taint_result.TaintNode.defaultInstance)))
          case 18 =>
            __sink = Option(_root_.scalapb.LiteParser.readMessage(_input__, __sink.getOrElse(org.argus.jawa.flow.taint_result.TaintNode.defaultInstance)))
          case 26 =>
            __types += _input__.readString()
          case 34 =>
            __steps += _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      org.argus.jawa.flow.taint_result.TaintPath(
          source = __source,
          sink = __sink,
          types = __types.result(),
          steps = __steps.result()
      )
    }
    def getSource: org.argus.jawa.flow.taint_result.TaintNode = source.getOrElse(org.argus.jawa.flow.taint_result.TaintNode.defaultInstance)
    def clearSource: TaintPath = copy(source = None)
    def withSource(__v: org.argus.jawa.flow.taint_result.TaintNode): TaintPath = copy(source = Option(__v))
    def getSink: org.argus.jawa.flow.taint_result.TaintNode = sink.getOrElse(org.argus.jawa.flow.taint_result.TaintNode.defaultInstance)
    def clearSink: TaintPath = copy(sink = None)
    def withSink(__v: org.argus.jawa.flow.taint_result.TaintNode): TaintPath = copy(sink = Option(__v))
    def clearTypes = copy(types = _root_.scala.collection.Seq.empty)
    def addTypes(__vs: _root_.scala.Predef.String*): TaintPath = addAllTypes(__vs)
    def addAllTypes(__vs: TraversableOnce[_root_.scala.Predef.String]): TaintPath = copy(types = types ++ __vs)
    def withTypes(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): TaintPath = copy(types = __v)
    def clearSteps = copy(steps = _root_.scala.collection.Seq.empty)
    def addSteps(__vs: _root_.scala.Predef.String*): TaintPath = addAllSteps(__vs)
    def addAllSteps(__vs: TraversableOnce[_root_.scala.Predef.String]): TaintPath = copy(steps = steps ++ __vs)
    def withSteps(__v: _root_.scala.collection.Seq[_root_.scala.Predef.String]): TaintPath = copy(steps = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => source.orNull
        case 2 => sink.orNull
        case 3 => types
        case 4 => steps
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => source.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => sink.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(types.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 4 => _root_.scalapb.descriptors.PRepeated(steps.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.argus.jawa.flow.taint_result.TaintPath
}

object TaintPath extends scalapb.GeneratedMessageCompanion[org.argus.jawa.flow.taint_result.TaintPath] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.argus.jawa.flow.taint_result.TaintPath] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.argus.jawa.flow.taint_result.TaintPath = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.argus.jawa.flow.taint_result.TaintPath(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.argus.jawa.flow.taint_result.TaintNode]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[org.argus.jawa.flow.taint_result.TaintNode]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.argus.jawa.flow.taint_result.TaintPath] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.argus.jawa.flow.taint_result.TaintPath(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[org.argus.jawa.flow.taint_result.TaintNode]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[org.argus.jawa.flow.taint_result.TaintNode]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TaintResultProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TaintResultProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = org.argus.jawa.flow.taint_result.TaintNode
      case 2 => __out = org.argus.jawa.flow.taint_result.TaintNode
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.argus.jawa.flow.taint_result.TaintPath(
  )
  implicit class TaintPathLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.flow.taint_result.TaintPath]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.argus.jawa.flow.taint_result.TaintPath](_l) {
    def source: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.flow.taint_result.TaintNode] = field(_.getSource)((c_, f_) => c_.copy(source = Option(f_)))
    def optionalSource: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.argus.jawa.flow.taint_result.TaintNode]] = field(_.source)((c_, f_) => c_.copy(source = f_))
    def sink: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.flow.taint_result.TaintNode] = field(_.getSink)((c_, f_) => c_.copy(sink = Option(f_)))
    def optionalSink: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.argus.jawa.flow.taint_result.TaintNode]] = field(_.sink)((c_, f_) => c_.copy(sink = f_))
    def types: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.types)((c_, f_) => c_.copy(types = f_))
    def steps: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Predef.String]] = field(_.steps)((c_, f_) => c_.copy(steps = f_))
  }
  final val SOURCE_FIELD_NUMBER = 1
  final val SINK_FIELD_NUMBER = 2
  final val TYPES_FIELD_NUMBER = 3
  final val STEPS_FIELD_NUMBER = 4
}
