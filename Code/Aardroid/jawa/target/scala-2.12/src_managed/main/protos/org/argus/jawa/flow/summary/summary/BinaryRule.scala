// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.argus.jawa.flow.summary.summary

@SerialVersionUID(0L)
final case class BinaryRule(
    ruleLhs: scala.Option[org.argus.jawa.flow.summary.summary.RuleLhs] = None,
    ops: org.argus.jawa.flow.summary.summary.BinaryRule.Ops = org.argus.jawa.flow.summary.summary.BinaryRule.Ops.PLUS_EQ,
    ruleRhs: scala.Option[org.argus.jawa.flow.summary.summary.RuleRhs] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[BinaryRule] with scalapb.lenses.Updatable[BinaryRule] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ruleLhs.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ruleLhs.get.serializedSize) + ruleLhs.get.serializedSize }
      if (ops != org.argus.jawa.flow.summary.summary.BinaryRule.Ops.PLUS_EQ) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, ops.value) }
      if (ruleRhs.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ruleRhs.get.serializedSize) + ruleRhs.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ruleLhs.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = ops
        if (__v != org.argus.jawa.flow.summary.summary.BinaryRule.Ops.PLUS_EQ) {
          _output__.writeEnum(2, __v.value)
        }
      };
      ruleRhs.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.argus.jawa.flow.summary.summary.BinaryRule = {
      var __ruleLhs = this.ruleLhs
      var __ops = this.ops
      var __ruleRhs = this.ruleRhs
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ruleLhs = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ruleLhs.getOrElse(org.argus.jawa.flow.summary.summary.RuleLhs.defaultInstance)))
          case 16 =>
            __ops = org.argus.jawa.flow.summary.summary.BinaryRule.Ops.fromValue(_input__.readEnum())
          case 26 =>
            __ruleRhs = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ruleRhs.getOrElse(org.argus.jawa.flow.summary.summary.RuleRhs.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      org.argus.jawa.flow.summary.summary.BinaryRule(
          ruleLhs = __ruleLhs,
          ops = __ops,
          ruleRhs = __ruleRhs
      )
    }
    def getRuleLhs: org.argus.jawa.flow.summary.summary.RuleLhs = ruleLhs.getOrElse(org.argus.jawa.flow.summary.summary.RuleLhs.defaultInstance)
    def clearRuleLhs: BinaryRule = copy(ruleLhs = None)
    def withRuleLhs(__v: org.argus.jawa.flow.summary.summary.RuleLhs): BinaryRule = copy(ruleLhs = Option(__v))
    def withOps(__v: org.argus.jawa.flow.summary.summary.BinaryRule.Ops): BinaryRule = copy(ops = __v)
    def getRuleRhs: org.argus.jawa.flow.summary.summary.RuleRhs = ruleRhs.getOrElse(org.argus.jawa.flow.summary.summary.RuleRhs.defaultInstance)
    def clearRuleRhs: BinaryRule = copy(ruleRhs = None)
    def withRuleRhs(__v: org.argus.jawa.flow.summary.summary.RuleRhs): BinaryRule = copy(ruleRhs = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ruleLhs.orNull
        case 2 => {
          val __t = ops.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 3 => ruleRhs.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ruleLhs.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PEnum(ops.scalaValueDescriptor)
        case 3 => ruleRhs.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.argus.jawa.flow.summary.summary.BinaryRule
}

object BinaryRule extends scalapb.GeneratedMessageCompanion[org.argus.jawa.flow.summary.summary.BinaryRule] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[org.argus.jawa.flow.summary.summary.BinaryRule] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.argus.jawa.flow.summary.summary.BinaryRule = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.argus.jawa.flow.summary.summary.BinaryRule(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[org.argus.jawa.flow.summary.summary.RuleLhs]],
      org.argus.jawa.flow.summary.summary.BinaryRule.Ops.fromValue(__fieldsMap.getOrElse(__fields.get(1), org.argus.jawa.flow.summary.summary.BinaryRule.Ops.PLUS_EQ.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[org.argus.jawa.flow.summary.summary.RuleRhs]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.argus.jawa.flow.summary.summary.BinaryRule] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.argus.jawa.flow.summary.summary.BinaryRule(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[org.argus.jawa.flow.summary.summary.RuleLhs]]),
        org.argus.jawa.flow.summary.summary.BinaryRule.Ops.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(org.argus.jawa.flow.summary.summary.BinaryRule.Ops.PLUS_EQ.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[org.argus.jawa.flow.summary.summary.RuleRhs]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SummaryProto.javaDescriptor.getMessageTypes.get(20)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SummaryProto.scalaDescriptor.messages(20)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = org.argus.jawa.flow.summary.summary.RuleLhs
      case 3 => __out = org.argus.jawa.flow.summary.summary.RuleRhs
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => org.argus.jawa.flow.summary.summary.BinaryRule.Ops
    }
  }
  lazy val defaultInstance = org.argus.jawa.flow.summary.summary.BinaryRule(
  )
  sealed trait Ops extends _root_.scalapb.GeneratedEnum {
    type EnumType = Ops
    def isPlusEq: _root_.scala.Boolean = false
    def isMinusEq: _root_.scala.Boolean = false
    def isEq: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Ops] = org.argus.jawa.flow.summary.summary.BinaryRule.Ops
  }
  
  object Ops extends _root_.scalapb.GeneratedEnumCompanion[Ops] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Ops] = this
    @SerialVersionUID(0L)
    case object PLUS_EQ extends Ops {
      val value = 0
      val index = 0
      val name = "PLUS_EQ"
      override def isPlusEq: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object MINUS_EQ extends Ops {
      val value = 1
      val index = 1
      val name = "MINUS_EQ"
      override def isMinusEq: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object EQ extends Ops {
      val value = 2
      val index = 2
      val name = "EQ"
      override def isEq: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Ops with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(PLUS_EQ, MINUS_EQ, EQ)
    def fromValue(value: _root_.scala.Int): Ops = value match {
      case 0 => PLUS_EQ
      case 1 => MINUS_EQ
      case 2 => EQ
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.argus.jawa.flow.summary.summary.BinaryRule.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.argus.jawa.flow.summary.summary.BinaryRule.scalaDescriptor.enums(0)
  }
  implicit class BinaryRuleLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.flow.summary.summary.BinaryRule]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, org.argus.jawa.flow.summary.summary.BinaryRule](_l) {
    def ruleLhs: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.flow.summary.summary.RuleLhs] = field(_.getRuleLhs)((c_, f_) => c_.copy(ruleLhs = Option(f_)))
    def optionalRuleLhs: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.argus.jawa.flow.summary.summary.RuleLhs]] = field(_.ruleLhs)((c_, f_) => c_.copy(ruleLhs = f_))
    def ops: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.flow.summary.summary.BinaryRule.Ops] = field(_.ops)((c_, f_) => c_.copy(ops = f_))
    def ruleRhs: _root_.scalapb.lenses.Lens[UpperPB, org.argus.jawa.flow.summary.summary.RuleRhs] = field(_.getRuleRhs)((c_, f_) => c_.copy(ruleRhs = Option(f_)))
    def optionalRuleRhs: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[org.argus.jawa.flow.summary.summary.RuleRhs]] = field(_.ruleRhs)((c_, f_) => c_.copy(ruleRhs = f_))
  }
  final val RULE_LHS_FIELD_NUMBER = 1
  final val OPS_FIELD_NUMBER = 2
  final val RULE_RHS_FIELD_NUMBER = 3
}
